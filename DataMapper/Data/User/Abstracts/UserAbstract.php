<?php

/**
 * Copyright (c) 2010-2016 Romain Cottard
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace Eureka\Module\Web\User\DataMapper\Data\User\Abstracts;

use Eureka\Component\Orm\DataMapper\DataAbstract;


/**
 * /!\ AUTO GENERATED FILE. DO NOT EDIT THIS FILE.
 * THIS FILE IS OVERWRITTEN WHEN THE ORM SCRIPT GENERATOR IS RAN.
 * You can add you specific code in child class: User
 *
 * @author  Romain Cottard
 * @version 1.0.0
 */
abstract class UserAbstract extends DataAbstract
{
    /**
     * @var bool $hasAutoIncrement If data has auto increment value.
     */
    protected $hasAutoIncrement = true;

    /**
     * @var int $id
     */
    protected $id = 0;

    /**
     * @var string $email
     */
    protected $email = '';

    /**
     * @var string $password
     */
    protected $password = '';

    /**
     * @var string $pseudo
     */
    protected $pseudo = '';

    /**
     * @var string $firstname
     */
    protected $firstname = null;

    /**
     * @var string $lastname
     */
    protected $lastname = null;

    /**
     * @var string $dateRegister
     */
    protected $dateRegister = null;

    /**
     * @var int $isActivated
     */
    protected $isActivated = 0;

    /**
     * @var string $dateActivation
     */
    protected $dateActivation = null;

    /**
     * @var string $codeActivation
     */
    protected $codeActivation = null;

    /**
     * @var string $avatar
     */
    protected $avatar = 'avatar05.png';

    /**
     * Get cache key
     *
     * @return string
     */
    public function getCacheKey()
    {
        return 'user_DATA_' . $this->getId();
    }


    /**
     * Get value for field "user_id"
     *
     * @return int
     */
    public function getId()
    {
        return $this->id;
    }

    /**
     * Get value for field "user_email"
     *
     * @return string
     */
    public function getEmail()
    {
        return $this->email;
    }

    /**
     * Get value for field "user_password"
     *
     * @return string
     */
    public function getPassword()
    {
        return $this->password;
    }

    /**
     * Get value for field "user_pseudo"
     *
     * @return string
     */
    public function getPseudo()
    {
        return $this->pseudo;
    }

    /**
     * Get value for field "user_firstname"
     *
     * @return string
     */
    public function getFirstname()
    {
        return $this->firstname;
    }

    /**
     * Get value for field "user_lastname"
     *
     * @return string
     */
    public function getLastname()
    {
        return $this->lastname;
    }

    /**
     * Get value for field "user_date_register"
     *
     * @return string
     */
    public function getDateRegister()
    {
        return $this->dateRegister;
    }

    /**
     * Get value for field "user_is_activated"
     *
     * @return int
     */
    public function getActivated()
    {
        return $this->isActivated;
    }

    /**
     * Get value for field "user_date_activation"
     *
     * @return string
     */
    public function getDateActivation()
    {
        return $this->dateActivation;
    }

    /**
     * Get value for field "user_code_activation"
     *
     * @return string
     */
    public function getCodeActivation()
    {
        return $this->codeActivation;
    }

    /**
     * Get value for field "user_avatar"
     *
     * @return string
     */
    public function getAvatar()
    {
        return $this->avatar;
    }


    /**
     * Overridden method setAutoIncrementId().
     *
     * @param  int $id
     * @return $this
     */
    public function setAutoIncrementId($id)
    {
        return $this->setId($id);
    }
    /**
     * Set value for field "user_id"
     *
     * @param  int $id
     * @return $this
     * @throws \UnderflowException
     */
    public function setId($id)
    {
        $id = (int) $id;

        if ($this->id < 0) {
            throw new \UnderflowException('Value of "id" must be greater than 0');
        }


        if ($this->exists() && $this->id !== $id) {
            $this->updated['id'] = true;
        }

        $this->id = $id;

        return $this;
    }

    /**
     * Set value for field "user_email"
     *
     * @param  string $email
     * @return $this
     */
    public function setEmail($email)
    {
        $email = (string) $email;

        if ($this->exists() && $this->email !== $email) {
            $this->updated['email'] = true;
        }

        $this->email = $email;

        return $this;
    }

    /**
     * Set value for field "user_password"
     *
     * @param  string $password
     * @return $this
     */
    public function setPassword($password)
    {
        $password = (string) $password;

        if ($this->exists() && $this->password !== $password) {
            $this->updated['password'] = true;
        }

        $this->password = $password;

        return $this;
    }

    /**
     * Set value for field "user_pseudo"
     *
     * @param  string $pseudo
     * @return $this
     */
    public function setPseudo($pseudo)
    {
        $pseudo = (string) $pseudo;

        if ($this->exists() && $this->pseudo !== $pseudo) {
            $this->updated['pseudo'] = true;
        }

        $this->pseudo = $pseudo;

        return $this;
    }

    /**
     * Set value for field "user_firstname"
     *
     * @param  string $firstname
     * @return $this
     */
    public function setFirstname($firstname)
    {
        $firstname = ($firstname === null ? $firstname : (string) $firstname);

        if ($this->exists() && $this->firstname !== $firstname) {
            $this->updated['firstname'] = true;
        }

        $this->firstname = $firstname;

        return $this;
    }

    /**
     * Set value for field "user_lastname"
     *
     * @param  string $lastname
     * @return $this
     */
    public function setLastname($lastname)
    {
        $lastname = ($lastname === null ? $lastname : (string) $lastname);

        if ($this->exists() && $this->lastname !== $lastname) {
            $this->updated['lastname'] = true;
        }

        $this->lastname = $lastname;

        return $this;
    }

    /**
     * Set value for field "user_date_register"
     *
     * @param  string $dateRegister
     * @return $this
     */
    public function setDateRegister($dateRegister)
    {
        $dateRegister = ($dateRegister === null ? $dateRegister : (string) $dateRegister);

        if ($this->exists() && $this->dateRegister !== $dateRegister) {
            $this->updated['dateRegister'] = true;
        }

        $this->dateRegister = $dateRegister;

        return $this;
    }

    /**
     * Set value for field "user_is_activated"
     *
     * @param  int $isActivated
     * @return $this
     */
    public function setIsActivated($isActivated)
    {
        $isActivated = (int) $isActivated;

        if ($this->exists() && $this->isActivated !== $isActivated) {
            $this->updated['isActivated'] = true;
        }

        $this->isActivated = $isActivated;

        return $this;
    }

    /**
     * Set value for field "user_date_activation"
     *
     * @param  string $dateActivation
     * @return $this
     */
    public function setDateActivation($dateActivation)
    {
        $dateActivation = ($dateActivation === null ? $dateActivation : (string) $dateActivation);

        if ($this->exists() && $this->dateActivation !== $dateActivation) {
            $this->updated['dateActivation'] = true;
        }

        $this->dateActivation = $dateActivation;

        return $this;
    }

    /**
     * Set value for field "user_code_activation"
     *
     * @param  string $codeActivation
     * @return $this
     */
    public function setCodeActivation($codeActivation)
    {
        $codeActivation = ($codeActivation === null ? $codeActivation : (string) $codeActivation);

        if ($this->exists() && $this->codeActivation !== $codeActivation) {
            $this->updated['codeActivation'] = true;
        }

        $this->codeActivation = $codeActivation;

        return $this;
    }

    /**
     * Set value for field "user_avatar"
     *
     * @param  string $avatar
     * @return $this
     */
    public function setAvatar($avatar)
    {
        $avatar = (string) $avatar;

        if ($this->exists() && $this->avatar !== $avatar) {
            $this->updated['avatar'] = true;
        }

        $this->avatar = $avatar;

        return $this;
    }

}
